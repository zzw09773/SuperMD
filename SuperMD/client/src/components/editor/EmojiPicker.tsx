import { useState } from 'react';
import { Search, X } from 'lucide-react';

interface EmojiPickerProps {
  onSelectEmoji: (emoji: string) => void;
  onClose: () => void;
}

const EmojiPicker = ({ onSelectEmoji, onClose }: EmojiPickerProps) => {
  const [searchTerm, setSearchTerm] = useState('');

  // Common emoji categories
  const emojiCategories = {
    'Smileys & People': [
      'üòÄ', 'üòÉ', 'üòÑ', 'üòÅ', 'üòÜ', 'üòÖ', 'ü§£', 'üòÇ', 'üôÇ', 'üôÉ', 'üòâ', 'üòä', 'üòá',
      'ü•∞', 'üòç', 'ü§©', 'üòò', 'üòó', 'üòö', 'üòô', 'ü•≤', 'üòã', 'üòõ', 'üòú', 'ü§™', 'üòù',
      'ü§ó', 'ü§≠', 'ü§´', 'ü§î', 'ü§ê', 'ü§®', 'üòê', 'üòë', 'üò∂', 'üòè', 'üòí', 'üôÑ', 'üò¨',
      'ü§•', 'üòå', 'üòî', 'üò™', 'ü§§', 'üò¥', 'üò∑', 'ü§í', 'ü§ï', 'ü§¢', 'ü§Æ', 'ü§ß', 'ü•µ',
      'ü•∂', 'üò∂‚Äçüå´Ô∏è', 'ü•¥', 'üòµ', 'ü§Ø', 'ü§†', 'ü•≥', 'ü•∏', 'üòé', 'ü§ì', 'üßê'
    ],
    'Animals & Nature': [
      'üê∂', 'üê±', 'üê≠', 'üêπ', 'üê∞', 'ü¶ä', 'üêª', 'üêº', 'üê®', 'üêØ', 'ü¶Å', 'üêÆ', 'üê∑',
      'üê∏', 'üêµ', 'üêî', 'üêß', 'üê¶', 'üê§', 'ü¶Ü', 'ü¶Ö', 'ü¶â', 'ü¶á', 'üê∫', 'üêó', 'üê¥',
      'ü¶Ñ', 'üêù', 'üêõ', 'ü¶ã', 'üêå', 'üêû', 'üêú', 'ü¶ü', 'ü¶ó', 'üå∏', 'üíê', 'üåπ', 'ü•Ä',
      'üå∫', 'üåª', 'üåº', 'üå∑', 'üå±', 'üå≤', 'üå≥', 'üå¥', 'üåµ', 'üåæ', 'üåø', '‚òòÔ∏è', 'üçÄ'
    ],
    'Food & Drink': [
      'üçé', 'üçè', 'üçä', 'üçã', 'üçå', 'üçâ', 'üçá', 'üçì', 'üçà', 'üçí', 'üçë', 'ü•≠', 'üçç',
      'ü••', 'ü•ù', 'üçÖ', 'üçÜ', 'ü•ë', 'ü•¶', 'ü•¨', 'ü•í', 'üå∂Ô∏è', 'üåΩ', 'ü•ï', 'üßÑ', 'üßÖ',
      'ü•î', 'üç†', 'ü•ê', 'ü•Ø', 'üçû', 'ü•ñ', 'ü•®', 'üßÄ', 'ü•ö', 'üç≥', 'üßà', 'ü•û', 'üßá',
      'ü•ì', 'ü•©', 'üçó', 'üçñ', 'üå≠', 'üçî', 'üçü', 'üçï', 'ü•™', 'ü•ô', 'üåÆ', 'üåØ', 'ü•ó'
    ],
    'Objects': [
      'üíª', '‚å®Ô∏è', 'üñ•Ô∏è', 'üñ®Ô∏è', 'üñ±Ô∏è', 'üñ≤Ô∏è', 'üíΩ', 'üíæ', 'üíø', 'üìÄ', 'üì±', 'üì≤', '‚òéÔ∏è',
      'üìû', 'üìü', 'üì†', 'üì∫', 'üìª', 'üéôÔ∏è', 'üéöÔ∏è', 'üéõÔ∏è', 'üß≠', '‚è±Ô∏è', '‚è≤Ô∏è', '‚è∞', 'üï∞Ô∏è',
      '‚åõ', '‚è≥', 'üì°', 'üîã', 'üîå', 'üí°', 'üî¶', 'üïØÔ∏è', 'üßØ', 'üõ¢Ô∏è', 'üí∏', 'üíµ', 'üí¥',
      'üí∂', 'üí∑', 'üí∞', 'üí≥', 'üíé', '‚öñÔ∏è', 'üß∞', 'üîß', 'üî®', '‚öíÔ∏è', 'üõ†Ô∏è', '‚õèÔ∏è', 'üî©'
    ],
    'Symbols': [
      '‚ù§Ô∏è', 'üß°', 'üíõ', 'üíö', 'üíô', 'üíú', 'ü§é', 'üñ§', 'ü§ç', 'üíî', '‚ù£Ô∏è', 'üíï', 'üíû',
      'üíì', 'üíó', 'üíñ', 'üíò', 'üíù', '‚ú®', '‚≠ê', 'üåü', 'üí´', '‚úÖ', '‚ùå', '‚≠ï', 'üî¥',
      'üü†', 'üü°', 'üü¢', 'üîµ', 'üü£', '‚ö™', '‚ö´', 'üü§', 'üî∫', 'üîª', 'üî∂', 'üî∑', 'üî∏',
      'üîπ', '‚ñ™Ô∏è', '‚ñ´Ô∏è', '‚óæ', '‚óΩ', '‚óºÔ∏è', '‚óªÔ∏è', 'üü•', 'üüß', 'üü®', 'üü©', 'üü¶', 'üü™'
    ],
  };

  const allEmojis = Object.values(emojiCategories).flat();
  const filteredEmojis = searchTerm
    ? allEmojis.filter(emoji => emoji.includes(searchTerm))
    : allEmojis;

  return (
    <div className="absolute top-full left-0 mt-2 w-80 bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-700 rounded-lg shadow-xl z-50">
      {/* Header */}
      <div className="flex items-center justify-between p-3 border-b border-gray-200 dark:border-gray-700">
        <h3 className="text-sm font-semibold text-gray-900 dark:text-white">ÈÅ∏ÊìáË°®ÊÉÖÁ¨¶Ëôü</h3>
        <button
          onClick={onClose}
          className="p-1 hover:bg-gray-100 dark:hover:bg-gray-700 rounded"
        >
          <X className="w-4 h-4 text-gray-600 dark:text-gray-400" />
        </button>
      </div>

      {/* Search */}
      <div className="p-3 border-b border-gray-200 dark:border-gray-700">
        <div className="relative">
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400" />
          <input
            type="text"
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            placeholder="ÊêúÂ∞ãË°®ÊÉÖÁ¨¶Ëôü..."
            className="w-full pl-10 pr-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
          />
        </div>
      </div>

      {/* Emoji Grid */}
      <div className="p-3 max-h-64 overflow-y-auto">
        {searchTerm ? (
          <div className="grid grid-cols-8 gap-2">
            {filteredEmojis.map((emoji, index) => (
              <button
                key={index}
                onClick={() => {
                  onSelectEmoji(emoji);
                  onClose();
                }}
                className="text-2xl p-2 hover:bg-gray-100 dark:hover:bg-gray-700 rounded transition-colors"
              >
                {emoji}
              </button>
            ))}
          </div>
        ) : (
          Object.entries(emojiCategories).map(([category, emojis]) => (
            <div key={category} className="mb-4 last:mb-0">
              <h4 className="text-xs font-semibold text-gray-600 dark:text-gray-400 mb-2">{category}</h4>
              <div className="grid grid-cols-8 gap-2">
                {emojis.map((emoji, index) => (
                  <button
                    key={index}
                    onClick={() => {
                      onSelectEmoji(emoji);
                      onClose();
                    }}
                    className="text-2xl p-2 hover:bg-gray-100 dark:hover:bg-gray-700 rounded transition-colors"
                  >
                    {emoji}
                  </button>
                ))}
              </div>
            </div>
          ))
        )}
      </div>
    </div>
  );
};

export default EmojiPicker;
